package project1;

import java.util.Random;
import java.util.Scanner;

public class strt {

	public static void main(String[] args) {
		// Lo Shu Magic Square --> Find the magic number and print 1 valid magic square possibility |
	int s[][] = {{1,2,3},{4,5,6},{7,8,9}};	
	int k = 0;
	while(true) {
		Random x = new Random();
		Random y = new Random();
		int a = x.nextInt(9);
		int b = y.nextInt(9);
		swap(s,a,b);
		k++;
		if(check_col(s) == check_rows(s) && check_rows(s) == diagonal(s) && check_col(s) == diagonal(s) || k == 10000000){
			break;
		}
	}
	for(int i = 0;i < 3;i++) {
		for(int j = 0;j < 3;j++) {
			System.out.print(s[i][j]);
		}
		System.out.println();
	}
	System.out.println("-->" + diagonal(s));
	
	
		
		
	}
	public static void swap(int s[][],int a,int b) {
		//find the index of a and b,and swap their position
		int i1 = 0;
		int i2 = 0;
		int j1 = 0;
		int j2 = 0;
		for(int i = 0;i < 3;i++) {
			for(int j = 0;j < 3;j++) {
				if(s[i][j] == a) {
					i1 = i;
					j1 = j;
				}
				if(s[i][j] == b) {
					i2 = i;
					j2 = j;
				}
			}
		}
		int x;
		x = s[i1][j1];
		s[i1][j1] = s[i2][j2];
		s[i2][j2] = x;
		
	}

	public static int check_col(int s[][]) {
		//check if the sum of the elements of all the colums of the square are equal
		int s1 = 0;
		int s2 = 0;
		int s3 = 0;
		for(int i = 0;i < 3;i++) {
			int z = 0;
			for(int j = 0;j < 3;j++) {
				z += s[i][j];
			}
			if(i == 0) {
				s1 = z;
			}
			if(i == 1) {
				s2 = z;
			}
			if(i == 2) {
				s3 = z;
			}
		}
		if(s1 == s2 && s1 == s3 && s2 == s3) {
			return s1;
		}
		return 0;
	}
	public static int check_rows(int s[][]) {
		//check if the sum of the elements of all the rows of the square are equal
		int s1 = 0;
		int s2 = 0;
		int s3 = 0;
		for(int i = 0;i < 3;i++) {
			int z = 0;
			for(int j = 0;j < 3;j++) {
				z += s[j][i];
			}
			if(i == 0) {
				s1 = z;
			}
			if(i == 1) {
				s2 = z;
			}
			if(i == 2) {
				s3 = z;
			}
		}
		if(s1 == s2 && s1 == s3 && s2 == s3) {
			return s1;
		}
		return 0;
	}
	public static int diagonal(int s[][]){
		//return the sum of the diagonal
		return s[0][0] + s[1][1] + s[2][2];
	}

	
	}
	
